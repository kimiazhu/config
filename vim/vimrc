"=========================================================================
" DesCRiption: My vimrc for Linux/Windows, GUI/Console
" Last Change: 2016-07-19
" Version: 1.91: add C# support
" Version: 1.92: add tagbar for Golang
"=========================================================================
" First of all, setup vundle with git
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

set nocompatible " no compatible with vi
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'fatih/vim-go'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'easymotion/vim-easymotion'
Plugin 'tpope/vim-surround'
" Plugin 'OmniSharp/omnisharp-vim'
Plugin 'tpope/vim-dispatch'
"Plugin 'scrooloose/syntastic'
Plugin 'vim-syntastic/syntastic'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdcommenter'
Plugin 'aperezdc/vim-template'
Plugin 'honza/vim-snippets'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'bling/vim-bufferline'
Plugin 'rking/ag.vim'
" Plugin 'scrooloose/syntastic'
Plugin 'jiangmiao/auto-pairs'
Plugin 'towolf/vim-helm'

call vundle#end()            " required
filetype plugin indent on    " required
runtime macros/matchit.vim
"let g:ctrlp_map = '<c-m>'
syntax on
"colorscheme monokai
set helplang=cn
set encoding=utf-8
set undofile
set backupdir=~/.vim/.backup//  
set directory=~/.vim/.swp//
set undodir=~/.vim/.undo//
" https://vim.ink/viminfo.html
set viminfo=!,'50,f0,<500,s100,:0,n~/.vim/viminfo
" set fileencoding=utf-8
" see here: http://edyfox.codecarver.org/html/vim_fileencodings_detection.html
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set number
set relativenumber
set cursorline " highlight current line
set ruler "open ruler in status bar
set shiftwidth=2 "set << and >> move 4 spaces
set softtabstop=2 " delete 4 spaces by click delete ke
set tabstop=2
set expandtab
set nobackup " override without backups
set autochdir " auth change work dir to current dir
set backupcopy=yes " when backup file exists, override it
set ignorecase smartcase
set nowrapscan
set incsearch
set hlsearch
set noerrorbells " 关闭错误信息响铃
set novisualbell " 关闭使用可视响铃代替呼叫
set t_vb= " 置空错误铃声的终端代码
" set showmatch " 插入括号时，短暂地跳转到匹配的对应括号
" set matchtime=2 " 短暂跳转到匹配括号的时间
set magic " 设置魔术
set hidden " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set guioptions-=T " 隐藏工具栏
set guioptions-=m " 隐藏菜单栏
set smartindent " 开启新行时使用智能自动缩进
set backspace=indent,eol,start
" 不设定在插入状态无法用退格键和 Delete 键删除回车符
set cmdheight=1 " 设定命令行的行数为 1
set laststatus=2 " 显示状态栏 (默认值为 1, 无法显示状态栏)
set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\ 
" 设置在状态行显示的信息
set nofoldenable " 开始折叠
set foldmethod=syntax " 设置语法折叠
set foldcolumn=0 " 设置折叠区域的宽度
setlocal foldlevel=2 " 设置折叠层数为
set updatetime=300
set foldclose=all " 设置为自动关闭折叠 
" nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
" 用空格键来开关折叠

let mapleader=','
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-d> <DELETE>
"inoremap ( ()<LEFT>
"inoremap [ []<LEFT>
"inoremap { {}<LEFT>
"inoremap " ""<LEFT>
"inoremap ' ''<LEFT>

"打开tabline功能,方便查看Buffer和切换,省去了minibufexpl插件
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
"设置切换Buffer快捷键"
"nnoremap <C-tab> :bn<CR>
"nnoremap <C-s-tab> :bp<CR>
let g:airline_theme='luna'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

" vim-go settings
let g:go_def_reuse_buffer = 1
"imap <C-[> <Esc>:GoDoc<CR>
"nmap <C-[> :GoDoc<CR>
autocmd FileType go nmap <Leader>i <Plug>(go-info)
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1
let g:go_def_mode = 'gopls'
" let g:go_info_mode = 'gopls'

" ycm config: https://jonasdevlieghere.com/a-better-youcompleteme-config/
" 跳转到定义处
nnoremap <Leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>"
" 主动调用自动补全
let g:ycm_key_invoke_completion = '<C-a>'
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files=1    " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2    " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0    " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
" 在注释输入中也能补全
let g:ycm_complete_in_comments = 1
" 在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
" 注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_key_list_select_completion = ['<C-f>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-b>', '<Up>']
autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"	"回车即选中当前项

let g:vim_markdown_toc_autofit = 1

" for ultisnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" 定义存放代码片段的文件夹
" .vim/snippets下，使用自定义和默认的，将会的到全局，有冲突的会提示
" let g:UltiSnipsSnippetDirectories=["snippets", "bundle/ultisnips/UltiSnips"]

" let g:EasyMotion_do_mapping = 0 " Disable default mappings
" let g:EasyMotion_leader_key='<Space>'
let g:EasyMotion_leader_key=','
nmap <Leader>s <Plug>(easymotion-overwin-f)
nmap <Leader>S <Plug>(easymotion-overwin-f2)
nmap S <Plug>(easymotion-overwin-f2)
" nmap <Leader>l <Plug>(easymotion-overwin-f2)
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
" nmap s <Plug>(easymotion-overwin-f2)
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" NERDTree config
"map <F2> :NERDTreeToggle<CR>
nmap ,n :NERDTreeFind<CR>
nmap ,m :NERDTreeToggle<CR>
let NERDTreeWinSize=30
let NERDTreeWinPos="left"
let NERDTreeShowHidden=1
" Do not display verbose help messages
" let NERDTreeMinimalUI=1
" Auto delete buffer after file was deleted
let NERDTreeAutoDeleteBuffer=1
" close NERDTree if no other window open beside NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
" auto start NERDTree
"autocmd vimenter * NERDTree

" ctags and tagbar/taglist
" if you are on macOS, you need to install ctags by `brew install ctags` to
" replace the system's ctag program, then run 'alias `brew --prefix`/bin/ctags'
" ========= run the following cmd to generate system ctags =========
" ctags -I __THROW --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --fields=+S  -R -f ~/.vim/systags /usr/include /usr/local/include
" ========= system ctags generation command end ==========
let g:tagbar_ctags_bin='ctags'
let g:tagbar_width = 30 "设置tagbar的宽度为30列，默认40
noremap <F3> :Tagbar<CR>
noremap ,b :Tagbar<CR>
" 启动时自动focus
" let g:tagbar_autofocus = 1
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() "如果是c语言的程序的话，tagbar自动开启
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>  
imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=./tags,tags,~/.vim/systags;/

" vim-go plugin config
" see: https://github.com/fatih/vim-go/blob/master/doc/vim-go.txt
"let g:go_template_file = "sample_kc.go"
" 关闭自动创建go语言模版，我们将使用单独的模版插件
let g:go_template_autocreate = 0

" vim templates
" see: https://github.com/aperezdc/vim-template/blob/master/doc/template.txt
let g:templates_directory = ['~/.vim/templates']
let g:username = 'ZHU HAIHUA'
let g:email = 'kimiazhu@gmail.com'

" vim-syntastic/syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

nmap w+ :resize -3<CR>
nmap w- :resize +3<CR>
nmap w, :vertical resize +3<CR>
nmap w. :vertical resize -3<CR>

" NERDTree联动当前文件
"autocmd BufEnter * silent! if (bufname('%') !~# 'NERD_tree_') && (bufname('%') !~# 'Tagbar') | cd %:p:h | NERDTreeCWD | wincmd p | endif


" GoTags config. Install by `go get -u github.com/jstemmer/gotags`
" See https://github.com/jstemmer/gotags
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" 还原上次退出文件时光标所处位置
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
